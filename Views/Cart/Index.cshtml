@model IEnumerable<ThuongMaiDienTu.Models.Cart>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutPage1.cshtml";
}

<main class="mt-2">
    <div class="cart">
        <div class="cart-header">
            <h2 class="cart-header-title">Giỏ hàng</h2>
            <ul class="cart-header-list">
                <li class="cart-header-item">
                    <input type="checkbox" id="select-all-checkbox" class="cart-header-item-checkbox">
                </li>
                <li class="cart-header-item">Hình ảnh</li>
                <li class="cart-header-item">Tên sản phẩm</li>
                <li class="cart-header-item">Số lượng</li>
                <li class="cart-header-item">Số tiền</li>
                <li class="cart-header-item">Thao tác</li>
            </ul>
        </div>

        <div class="cart-content">
            @foreach (var item in Model)
            {
                <ul class="cart-content-list">
                    <li class="cart-content-item">
                        <input type="checkbox" class="cart-content-item-checkbox" data-product-id="@item.ProductID">
                    </li>
                    <li class="cart-content-item">
                        <img src="~/images/@item.Image" class="cart-content-item-img" />
                    </li>
                    <li class="cart-content-item">
                        <span>@item.Name</span>
                    </li>
                    <li class="cart-content-item">
                        <button class="detail-quantity-prepend" data-product-id="@item.ProductID">
                            <i class="fas fa-minus"></i>
                        </button>
                        <input type="number" name="quantity" value="@item.Quantity" min="1" style="width: 36px;" readonly />
                        <button class="detail-quantity-append" data-product-id="@item.ProductID">
                            <i class="fas fa-plus"></i>
                        </button>
                    </li>
                    <li class="cart-content-item">
                        @{
                            decimal price = item.Quantity * item.Price;
                        }
                        @price.ToString("N0") VNĐ
                    </li>
                    <li class="cart-content-item">
                        @using (Html.BeginForm("Remove", "Cart", FormMethod.Post))
                        {
                            @Html.Hidden("productId", item.ProductID)
                            <button type="submit" class="btn btn-warning">Xoá</button>
                        }
                    </li>
                </ul>
            }
        </div>

        <div class="cart-bottom">
            <ul class="cart-bottom-list-left">
                <li class="cart-bottom-item">
                    <input type="checkbox" id="select-all-bottom-checkbox" class="cart-bottom-item-checkbox">
                </li>
                <li class="cart-bottom-item">Chọn tất cả (@ViewBag.TotalQuantity)</li>
                <li class="cart-bottom-item disable-cursor">
                    @using (Html.BeginForm("Clear", "Cart", FormMethod.Post))
                    {
                        <button type="submit">Xoá tất cả</button>
                    }
                </li>
            </ul>
            <ul class="cart-bottom-list-right">
                <li class="cart-bottom-item">Tổng tiền</li>
                @{
                    decimal totalPrice = (decimal)ViewBag.TotalPrice;
                }
                <li class="cart-bottom-item">@totalPrice.ToString("N0") VNĐ</li>
                <li class="cart-bottom-item">
                    <button type="button" id="checkout-button" class="cart-bottom-button disable-cursor" disabled>Mua hàng</button>
                </li>
            </ul>
        </div>
    </div>
</main>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            // Handle quantity update
            $(".detail-quantity-prepend, .detail-quantity-append").click(function () {
                var isPrepend = $(this).hasClass("detail-quantity-prepend");
                var productId = $(this).data("product-id");
                var quantityInput = $(this).siblings('input[name="quantity"]');
                var currentQuantity = parseInt(quantityInput.val());
                var newQuantity = isPrepend ? currentQuantity - 1 : currentQuantity + 1;

                if (newQuantity > 0) {
                    updateCartQuantity(productId, newQuantity, quantityInput);
                }
            });

            function updateCartQuantity(productId, newQuantity, quantityInput) {
                $.ajax({
                    url: '@Url.Action("UpdateQuantity", "Cart")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        quantity: newQuantity
                    },
                    success: function (result) {
                        quantityInput.val(newQuantity);
                        location.reload(); // Optionally, update other parts of the cart like total quantity and price
                    },
                    error: function (xhr, status, error) {
                        console.error("Error updating cart quantity: " + error);
                    }
                });
            }

            // Handle checkbox selection
            $("#select-all-checkbox, #select-all-bottom-checkbox").change(function () {
                var isChecked = $(this).is(':checked');
                $(".cart-content-item-checkbox").prop('checked', isChecked);
                updateCheckoutButtonState();
            });

            $(".cart-content-item-checkbox").change(function () {
                updateCheckoutButtonState();
            });

            function updateCheckoutButtonState() {
                var anyChecked = $(".cart-content-item-checkbox:checked").length > 0;
                var checkoutButton = $("#checkout-button");

                if (anyChecked) {
                    checkoutButton.prop("disabled", false).removeClass("disable-cursor");
                } else {
                    checkoutButton.prop("disabled", true).addClass("disable-cursor");
                }
            }

            // Handle checkout button click
            $("#checkout-button").click(function () {
                var selectedProductIds = $(".cart-content-item-checkbox:checked").map(function () {
                    return $(this).data("product-id");
                }).get();

                if (selectedProductIds.length > 0) {
                    window.location.href = '@Url.Action("Checkout", "Cart")' + '?productIds=' + selectedProductIds.join(',');
                }
            });

            // Sync the state of "Select All" checkboxes
            function syncSelectAllCheckboxes() {
                var allChecked = $(".cart-content-item-checkbox").length === $(".cart-content-item-checkbox:checked").length;
                $("#select-all-checkbox, #select-all-bottom-checkbox").prop('checked', allChecked);
            }

            $(".cart-content-item-checkbox").change(function () {
                syncSelectAllCheckboxes();
            });

            // Initial sync
            syncSelectAllCheckboxes();
        });
    </script>
}
